PLG_CONTENT_MITYITEMHELPER="Mity - Item Helper Content Plugin"
PLG_CONTENT_MITYITEMHELPER_XML_DESCRIPTION="<p>This plugin processes Custom Fields for easier access, and provides additional helper functions when working with Items (such as Articles and Users).</p> <h2 id="how-to-use">How to use</h2> <p>The Item Helper library is automatically included for content through Joomla&#39;s <code>onContentPrepare</code> event. For most cases, you won&#39;t need to do anything else.</p> <p>You will need to either add the Item Helper&#39;s namespace to your code, or use the full namespaced reference:</p> <pre><code class="lang-php"><span class="hljs-keyword">use</span> <span class="hljs-title">Mity</span>; \nItemHelper::getArticleById(<span class="hljs-number">123</span>); \nItemHelper::getFieldValue($item, <span class="hljs-string">'my-field'</span>); </code></pre> <p>or</p> <pre><code class="lang-php">\Mity\<span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getArticleById</span>(<span class="hljs-number">123</span>); \n\Mity\<span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getFieldValue</span>(<span class="hljs-variable">$item</span>, <span class="hljs-string">'my-field'</span>); </code></pre> <h3 id="get-an-article-by-id">Get an Article by ID</h3> <p>This is a simple shortcut to load an Article for a given ID. This is purely a helper to make it effortless for you to load an article.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getArticleById</span>(<span class="hljs-variable">$artice_id</span>); </code></pre> <p>Accepts:</p> <ul> <li><code>$article_id</code> of the Joomla Content Article to load</li> </ul> <p>Returns:</p> <ul> <li>a Joomla Article item</li> </ul> <h3 id="get-field-value">Get Field Value</h3> <p>Get the Value of a given Custom Field for an Item.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getFieldValue</span>(<span class="hljs-variable">$item</span>, <span class="hljs-variable">$field</span>); </code></pre> <p>Accepts:</p> <ul> <li>The <code>$item</code> to process</li> <li>The <code>$field</code> to find - this is the <code>Name</code> of your Field.</li> </ul> <p>Returns:</p> <ul> <li>the field value, if found</li> </ul> <h3 id="get-field-label">Get Field Label</h3> <p>Get the Label of a given Custom Field for an Item.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getFieldLabel</span>(<span class="hljs-variable">$item</span>, <span class="hljs-variable">$field</span>); </code></pre> <p>Accepts:</p> <ul> <li>The <code>$item</code> to process</li> <li>The <code>$field</code> to find - this is the <code>Name</code> of your Field.</li> </ul> <p>Returns:</p> <ul> <li>the field&#39;s label, if found</li> </ul> <h3 id="get-field-options">Get Field Options</h3> <p>Get the Options of a given Custom Field for an Item.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getFieldOptions</span>(<span class="hljs-variable">$item</span>, <span class="hljs-variable">$field</span>); </code></pre> <p>Accepts:</p> <ul> <li>The <code>$item</code> to process</li> <li>The <code>$field</code> to find - this is the <code>Name</code> of your Field.</li> </ul> <p>Returns:</p> <ul> <li>the field&#39;s options, if applicable</li> </ul> <h3 id="get-field-group-id">Get Field Group ID</h3> <p>Get the Group ID of a given Custom Field for an item</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:getFieldGroupId</span>(<span class="hljs-variable">$item</span>, <span class="hljs-variable">$field</span>); </code></pre> <p>Accepts:</p> <ul> <li>The <code>$item</code> to process</li> <li>The <code>$field</code> to find - this is the <code>Name</code> of your Field.</li> </ul> <p>Returns:</p> <ul> <li>the field&#39;s Group ID, if applicable</li> </ul> <h3 id="truncate">Truncate</h3> <p>Truncate a string to a given number of characters.</p> <p>The output string may be longer than the <code>$numberOfCharacters</code> because the function is designed to not break words.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:truncate</span>(<span class="hljs-variable">$string</span>, <span class="hljs-variable">$numberOfCharacters</span> = <span class="hljs-number">160</span>, <span class="hljs-variable">$includeEllipsis</span> = <span class="hljs-keyword">true</span>); </code></pre> <p>Accepts:</p> <ul> <li>The <code>string</code> to truncate</li> <li>The <code>$numberOfCharacters</code> to aim for (see note above)</li> <li>Boolean <code>$includeEllipsis</code> to include &quot;...&quot; or not</li> </ul> <p>Returns:</p> <ul> <li>the field&#39;s Group ID, if applicable</li> </ul> <h3 id="process">Process</h3> <p>This is automatically called when interacting with the item.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:process</span>(<span class="hljs-variable">$item</span>); </code></pre> <p>The <code>process</code> method <code>$item</code> is passed by reference, and will be modified by the Item Helper. Because of this, you do not need to store the returned variable, which is the modified <code>$item</code>.</p> <p><code>com_content.article</code> and <code>com_users.user</code> will automatically be detected. If you are using a different type alias, you will need to pass this as the second parameter.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:process</span>(<span class="hljs-variable">$item</span>, <span class="hljs-string">'com_customcomponent.typealias'</span>); </code></pre> <p>To save processing, when an <code>$item</code> has been processed, the processing is skipped on future requests. If you need to force a re-process, you can pass <code>true</code> as the third parameter. If using automatic type alias detection, pass <code>false</code> as the second parameter, or your custom type alias.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:process</span>(<span class="hljs-variable">$item</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>); </code></pre> <h3 id="re-process">Re-process</h3> <p>You can call <code>reprocess</code> as a shortcut to the <code>process</code> call above.</p> <pre><code class="lang-php"><span class="hljs-symbol">ItemHelper:</span><span class="hljs-symbol">:reprocess</span>(<span class="hljs-variable">$item</span>); </code></pre> <p>This will use the default type aliases of <code>com_content.article</code> or <code>com_users.user</code>, or you can pass your own custom type alias just like the <code>process</code> function.</p> <h3 id="manually-including-the-item-helper">Manually including the Item Helper</h3> <p>If you need to include the Item Helper yourself, you can include the library manually:</p> <pre><code class="lang-php">require_once(<span class="hljs-name">JPATH_PLUGINS</span>.'/content/mityitemhelper/ItemHelper.php')<span class="hljs-comment">;</span> </code></pre> <p>You can then use the Item Helper as you normally would.</p> <h2 id="license">License</h2> <p>This addon is licensed under the MIT license.</p> "